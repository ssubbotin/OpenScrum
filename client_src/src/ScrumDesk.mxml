<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:resize="flex.utils.ui.resize.*"
			   minWidth="400" minHeight="200" pageTitle="OpenScrum v0.2"
			   xmlns:local="*"
			   width="100%" height="100%"
			   creationComplete="creationCompleteHandler(event)">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style source="ScrumDesk.css"/>
	<fx:Script>
		<![CDATA[
			import flash.display.Stage;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ScrollEvent;
			import mx.graphics.ImageSnapshot;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			
			import spark.components.BorderContainer;
			import spark.effects.Scale;
			import spark.skins.spark.BorderContainerSkin;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(MouseEvent.MOUSE_WHEEL, disableMouseHandler, true);
				scroller.addEventListener(MouseEvent.MOUSE_DOWN, mouseCapture);
				scroller.addEventListener(MouseEvent.MOUSE_UP, mouseRelease);
				scroller.addEventListener(Event.MOUSE_LEAVE, mouseRelease);
				scroller.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, true);
				serverURL = FlexGlobals.topLevelApplication.parameters["serverURL"] as String;
				sprintID = FlexGlobals.topLevelApplication.parameters["sprintID"] as String;
				gettasks.send();
			}
			
			protected function calcComplexity():void {
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot];
				
				var complexity:Number = 0;
				var count:Number = 0;
				for(var oneQuad:Object in quads) {
					for(var i:int=0; i<quads[oneQuad].notesDock.numElements; i++) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							var note:StickyNote = quads[oneQuad].notesDock.getElementAt(i) as StickyNote;
							if(note.color != 0xb7fa57) {
								var days:String = note.usDays;
								days = days.replace(/,/g,".");
								complexity = complexity + parseFloat(days);
								count = count + 1;
							}
						}
					}
				}
				sum.text = "tasks: " + count.toFixed(0) + ", sum: " + complexity.toFixed(1);
			}
			
			private var captureMode:Boolean = false;
			private var captureX:Number = 0;
			private var captureY:Number = 0;
			private var timer:Timer = new Timer(60000, 0);
			
			private function checkForUpdate(e:Event):void {
				getversion.send();
			}
			
			private function mouseCapture(event:MouseEvent):void
			{
				if(event.target.parentDocument is DeskQuadrant) {
					captureMode = true;
					captureX = event.stageX;
					captureY = event.stageY;
				}
			}

			private function mouseRelease(event:Event):void
			{
			    captureMode = false;	
			}

			private function mouseMove(event:MouseEvent):void
			{
				if(!event.buttonDown) {
					mouseRelease(event);
				}
				if(captureMode) {
					event.stopImmediatePropagation();
					scroller.horizontalScrollBar.value = scroller.horizontalScrollBar.value + (captureX - event.stageX)/(zoomFactor/100);
					scroller.verticalScrollBar.value = scroller.verticalScrollBar.value + (captureY - event.stageY)/(zoomFactor/100);
					captureX = event.stageX;
					captureY = event.stageY;
				}
				/* if((!captureMode) && (event.target.parentDocument is StickyNote) && (zoomFactor<100)) {
					event.target.parentDocument.Scale()
				} */
			}
			
			private function loadPerson(person:Object, sn:StickyNote):void {
				var sp:StickyPerson = new StickyPerson();
				//sp.parentNoteID = person.task_id;
				sp.person = person.name;
				sp.background = person.color as int;
				sp.parentNoteID = sn.noteID;
				sp.name = person.name;
				sp.reviewer = person.reviewer as Boolean;
				if(sp.reviewer) {
					sn.reviewerDock.addElement(sp);
				} else {
					sn.personDock.addElement(sp);
				}
			}
			
			private function loadNote(note:Object):void {
				
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot,
				    q_checkingtop, q_checkingmid, q_checkingbot];
				
				var quad:int = note.quad as int;
				var sn:StickyNote = new StickyNote();
				sn.noteID = note.id;
				sn.color = note.color as int;
				sn.x = note.x as int;
				sn.y = note.y as int;
				sn.usNumber = note.us_num; 
				sn.usDays = note.us_time;
				sn.inWorkDays = note.inwork;
				sn.text = note.us_text;
				sn.quadId = quad;
				quads[quad-1].notesDock.addElement(sn);

				if(note.assigned != null) {
					if(note.assigned is ArrayCollection) {
						for(var oneperson:Object in note.assigned) {					
							loadPerson(note.assigned[oneperson], sn);
						}
					} else {
						loadPerson(note.assigned, sn);
					}
				}
			}
			
			private function findBackground(name:String):uint {
				var sp:StickyPerson = null;
				for(var j:int=0; j<palette.numElements; j++) {
					if(palette.getElementAt(j) is StickyPerson) {
						sp = palette.getElementAt(j) as StickyPerson;
						if(sp.person == name) {
							return sp.background;
						}
					}
				}
				return 0;
			}
			
			private function loadIncremental(line:Object):void {
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot,
					q_checkingtop, q_checkingmid, q_checkingbot];
				
				var taskKey:String = line.task_us_num;
				var action:String = line.action;
				var value:String = line.value;
				var i:int;
				
				// find note and its hosting quad
				var sn:StickyNote = null;
				var qn:DeskQuadrant = null;
				var found:Boolean = false;
				for(var oneQuad:Object in quads) {
					for(i=0; i<quads[oneQuad].notesDock.numElements; i++) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							sn = quads[oneQuad].notesDock.getElementAt(i);
							if(sn.noteID == taskKey) {
								qn = quads[oneQuad];
								found = true;
								break;
							}
						}
					}
					if(found) {
						break;
					}
				}
				
				var sp:StickyPerson = null;
				switch(action) {
					case 'move_xy':
						var pos:Array = value.split(",");
						sn.x = pos[0];
						sn.y = pos[1];
						break;
					case 'move_quad': 
						var newQuad:int = int(value);
						qn.notesDock.removeElement(sn);
						quads[newQuad-1].notesDock.addElement(sn);
						break;
					case 'del_task':
						if(found) {
							qn.notesDock.removeElement(sn);
						}
						break;
					case 'del_assignee':
						for(i=0; i<sn.personDock.numElements; i++) {
							if(sn.personDock.getElementAt(i) is StickyPerson) {
								sp = sn.personDock.getElementAt(i) as StickyPerson;
								if(sp.name == value) {
									sn.personDock.removeElementAt(i);
									break;
								}
							}
						}
						break;
					case 'del_reviewer':
						sn.reviewerDock.removeAllElements();
						break;
					case 'add_task':
						if(!found) {
							var newSn:StickyNote = new StickyNote();
							newSn.noteID = taskKey;
							newSn.quadId = 1;
							quads[0].notesDock.addElement(newSn);
						}
						break;
					case 'add_assignee': 
						var spFound:Boolean = false;
						for(i=0; i<sn.personDock.numElements; i++) {
							if(sn.personDock.getElementAt(i) is StickyPerson) {
								sp = sn.personDock.getElementAt(i) as StickyPerson;
								if(sp.name == value) {
									spFound = true;
									break;
								}
							}
						}
						if(!spFound) {
							var newPerson:StickyPerson = new StickyPerson();
							newPerson.parentNoteID = taskKey;
							newPerson.person = value;
							newPerson.name = value;
							newPerson.background = findBackground(value);
							sn.personDock.addElement(newPerson);
						}
						break;
					case 'add_reviewer': 
						sn.reviewerDock.removeAllElements();

						var newReviewer:StickyPerson = new StickyPerson();
						newReviewer.parentNoteID = taskKey;
						newReviewer.person = value;
						newReviewer.name = value;
						newReviewer.background = findBackground(value);
						newReviewer.reviewer = true;
						sn.reviewerDock.addElement(newReviewer);
						break;					
					case 'change_us_num': 
						sn.usNumber = value;
						break;
					case 'change_us_text': 
						sn.text = value;
						break;
					case 'change_us_time': 
						sn.usDays = value;
						break;
					case 'change_us_priority': break;
					case 'change_color':
						sn.color = int(value);
						break;
				}
			}

			protected function gettasks_resultHandler(event:ResultEvent):void
			{
				if(gettasks.lastResult.scrumdesk != null) {
					if(gettasks.lastResult.scrumdesk.sprint_name != null) {
						sprint_name = gettasks.lastResult.scrumdesk.sprint_name; 
					}
					if(gettasks.lastResult.scrumdesk.read_only != null) {
						read_only = gettasks.lastResult.scrumdesk.read_only as Boolean; 
					}
					if(gettasks.lastResult.scrumdesk.version != null) {
						version = gettasks.lastResult.scrumdesk.version as int; 
					}
					if(gettasks.lastResult.scrumdesk.notes != null) {
						if(gettasks.lastResult.scrumdesk.notes is ArrayCollection) {
							for(var onenote:Object in gettasks.lastResult.scrumdesk.notes) {
								loadNote(gettasks.lastResult.scrumdesk.notes[onenote]);
							}
						} else {
							loadNote(gettasks.lastResult.scrumdesk.notes);
						}						
					}
				}
				
				if(!timer.running) {
					var interval:int = 60000; // default: 1 min
					var enabled:Boolean = true;
					
					var mySO:SharedObject = SharedObject.getLocal("openscrum");
					
					if(mySO.data.hasOwnProperty("incremental_load_timer_interval")) {
						interval = mySO.data.incremental_load_timer_interval;
					}
					if(mySO.data.hasOwnProperty("incremental_load_timer_enabled")) {
						enabled = mySO.data.incremental_load_timer_enabled;
					}
					
					timer.delay = interval;
					timer.addEventListener(TimerEvent.TIMER, checkForUpdate);
					if(enabled) {
						timer.start();
					} else {
						timer.removeEventListener(TimerEvent.TIMER, checkForUpdate);
					}
				}
			}
			
			protected function getincremental_resultHandler(event:ResultEvent):void
			{
				if(getincremental.lastResult.openscrum != null) {
					if(getincremental.lastResult.openscrum.history != null) {
						if(getincremental.lastResult.openscrum.history is ArrayCollection) {
							for(var oneLine:Object in getincremental.lastResult.openscrum.history) {
								loadIncremental(getincremental.lastResult.openscrum.history[oneLine]);
							}
						} else {
							loadIncremental(getincremental.lastResult.openscrum.history);
						}
					}
				}
			}
			
			protected function refresh_clickHandler(event:MouseEvent):void
			{				
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot,
					q_checkingtop, q_checkingmid, q_checkingbot];
				
				for(var oneQuad:Object in quads) {
					for(var i:int=0; i<quads[oneQuad].notesDock.numElements; ) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							quads[oneQuad].notesDock.removeElementAt(i);
						} else {
							i = i + 1;
						}
					}
				}
				gettasks.send();
			}
			
			protected function disableMouseHandler(event:MouseEvent):void {
				event.stopPropagation();
				if(event.ctrlKey) {
					if(event.delta>0) {
						if(zoomFactor<300) {
							zoomFactor = zoomFactor * zoomFactorStep;
						}
					} else {
						if(zoomFactor>10) {
							zoomFactor = zoomFactor / zoomFactorStep;
						}
					}
				} else {
					scroller.verticalScrollBar.value = scroller.verticalScrollBar.value - event.delta*20; 
				}
			}
			
			public function takeSnapshot() :void
			{
				var bd:BitmapData = new BitmapData(fullDesk.measuredWidth,fullDesk.measuredHeight);
				
				// draw top row
				bd.draw(q_lefttop);
				
				var matrix_t1:Matrix = new Matrix();
				matrix_t1.translate(q_lefttop.width,0);
				bd.draw(q_midtop, matrix_t1, null, "normal");
				
				var matrix_t2:Matrix = new Matrix();
				matrix_t2.translate(q_lefttop.width + q_midtop.width,0);
				bd.draw(q_righttop, matrix_t2, null, "normal");
				
				var matrix_t3:Matrix = new Matrix();
				matrix_t3.translate(q_lefttop.width + q_midtop.width + q_righttop.width,0);
				bd.draw(q_checkingtop, matrix_t3, null, "normal");

				var matrix_t4:Matrix = new Matrix();
				matrix_t4.translate(q_lefttop.width + q_midtop.width + q_righttop.width + q_checkingtop.width,0);
				bd.draw(q_checktop, matrix_t4, null, "normal");
				
				// draw middle row
				var matrix_m1:Matrix = new Matrix();
				matrix_m1.translate(0, q_lefttop.height);
				bd.draw(q_leftmid, matrix_m1, null, "normal");
				
				var matrix_m2:Matrix = new Matrix();
				matrix_m2.translate(q_lefttop.width, q_lefttop.height);
				bd.draw(q_midmid, matrix_m2, null, "normal");
				
				var matrix_m3:Matrix = new Matrix();
				matrix_m3.translate(q_lefttop.width + q_midtop.width, q_lefttop.height);
				bd.draw(q_rightmid, matrix_m3, null, "normal");

				var matrix_m4:Matrix = new Matrix();
				matrix_m4.translate(q_lefttop.width + q_midtop.width + q_righttop.width, q_lefttop.height);
				bd.draw(q_checkingmid, matrix_m4, null, "normal");

				var matrix_m5:Matrix = new Matrix();
				matrix_m5.translate(q_lefttop.width + q_midtop.width + q_righttop.width + q_checkingtop.width, q_lefttop.height);
				bd.draw(q_checkmid, matrix_m5, null, "normal");

                // draw bottom row
				var matrix_b1:Matrix = new Matrix();
				matrix_b1.translate(0, q_lefttop.height+q_leftmid.height);
				bd.draw(q_leftbot, matrix_b1, null, "normal");
				
				var matrix_b2:Matrix = new Matrix();
				matrix_b2.translate(q_lefttop.width, q_lefttop.height+q_leftmid.height);
				bd.draw(q_midbot, matrix_b2, null, "normal");
				
				var matrix_b3:Matrix = new Matrix();
				matrix_b3.translate(q_lefttop.width + q_midtop.width ,q_lefttop.height+q_leftmid.height);
				bd.draw(q_rightbot, matrix_b3, null, "normal");
				
				var matrix_b4:Matrix = new Matrix();
				matrix_b4.translate(q_lefttop.width + q_midtop.width + q_righttop.width, q_lefttop.height+q_leftmid.height);
				bd.draw(q_checkingbot, matrix_b4, null, "normal");

				var matrix_b5:Matrix = new Matrix();
				matrix_b5.translate(q_lefttop.width + q_midtop.width + q_righttop.width + q_checkingtop.height, q_lefttop.height+q_leftmid.height);
				bd.draw(q_checkbot, matrix_b5, null, "normal");

				// save PNG
				var ba:ByteArray = (new PNGEncoder()).encode(bd);	
				
				var today:Date = new Date();
				var datetime:String = today.getDate().toString()+"_"+
					                 (today.getMonth()+1).toString()+"_"+
									 today.getFullYear().toString()+"_"+
									 today.getHours().toString()+"_"+
									 today.getMinutes().toString();

				(new FileReference()).save(ba, "scrumdesk_snapshot_" + datetime + ".png");
			}
			
			protected function takeSnapshot_clickHandler(event:MouseEvent):void
			{
				takeSnapshot();
			}
			
			protected function showHistory_clickHandler(event:MouseEvent):void
			{
				var wnd:SprintHistoryView = SprintHistoryView(PopUpManager.createPopUp( this, SprintHistoryView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}

			protected function burndown_clickHandler(event:MouseEvent):void
			{
				var wnd:BurnDownView = BurnDownView(PopUpManager.createPopUp( this, BurnDownView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}

			protected function settings_clickHandler(event:MouseEvent):void
			{
				var wnd:SettingsView = SettingsView(PopUpManager.createPopUp( this, SettingsView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}
			
			protected function getversion_resultHandler(event:ResultEvent):void
			{
				var received_ver:int = getversion.lastResult.valueOf() as int;
				if(received_ver>version) {
					getincremental.send();
					version = received_ver;
				}				
			}
						
			protected function sum_mouseDownHandler(event:MouseEvent):void
			{
				calcComplexity();				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
		<fx:String id="serverURL">http://localhost</fx:String>
		<fx:String id="sprintID">NoID</fx:String>		
		<fx:String id="sprint_name">NoName</fx:String>
		<fx:Boolean id="read_only">false</fx:Boolean>		
		<fx:Number id="zoomFactor">100</fx:Number>
		<fx:Number id="zoomFactorStep">1.1</fx:Number>
		<fx:Number id="zoomX">0</fx:Number>
		<fx:Number id="zoomY">0</fx:Number>
		<fx:int id="version">0</fx:int>		
		
		<mx:HTTPService id="gettasks" url="{serverURL + '/gettasks.php'}" result="gettasks_resultHandler(event)" method="GET">
			<mx:request xmlns=""> 
				<sprint_id>{sprintID}</sprint_id>
			</mx:request>    			
		</mx:HTTPService>	
		
		<mx:HTTPService id="getversion" url="{serverURL + '/getversion'}" result="getversion_resultHandler(event)" method="GET">
			<mx:request xmlns=""> 
				<sprint_id>{sprintID}</sprint_id>
			</mx:request>    			
		</mx:HTTPService>	
		
		<mx:HTTPService id="getincremental" url="{serverURL + '/gettasksinc'}" result="getincremental_resultHandler(event)" method="GET">
			<mx:request xmlns=""> 
				<sprint_id>{sprintID}</sprint_id> 
				<ver>{version}</ver> 
			</mx:request>    			
		</mx:HTTPService>		
		
		<mx:Glow id="glowImage" duration="250"    
				 alphaFrom="1" alphaTo=".3"  
				 blurXFrom="0.0" blurXTo="50"  
				 blurYFrom="0.0" blurYTo="50"  
				 color="0xFFF58A"/>  
		
		<mx:Glow id="unglowImage" duration="250"    
				 alphaFrom=".3" alphaTo="1.0"  
				 blurXFrom="50.0" blurXTo="0.0"  
				 blurYFrom="50.0" blurYTo="0.0"  
				 color="0xFFF58A"/> 
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%">
		<mx:ApplicationControlBar focusEnabled="true" depth="1" dock="true" paddingTop="0" paddingBottom="0" width="100%" verticalAlign="middle">
<!--			<mx:MenuBar id="mainMenuBar"  labelField="@label">
				<fx:XMLList>
					<menuitem label="Спринт" >
						<menuitem label="SubMenuItem A-1" type="check"/>
						<menuitem label="SubMenuItem A-2" type="check"/>
					</menuitem>
					<menuitem label="Задачи" >
						<menuitem label="SubMenuItem B-1" type="radio" groupName="one"/>
						<menuitem label="SubMenuItem B-2" type="radio" groupName="one"/>
						<menuitem label="SubMenuItem B-3" type="radio" groupName="one"/>
					</menuitem>
					<menuitem label="Люди" >
						<menuitem label="SubMenuItem D-1" type="radio" groupName="one"/>
						<menuitem label="SubMenuItem D-2" type="radio" groupName="one"/>
						<menuitem label="SubMenuItem D-3" type="radio" groupName="one"/>
					</menuitem>
				</fx:XMLList>
			</mx:MenuBar>-->
			<mx:Label text="Sprint: {!read_only ? sprint_name: sprint_name + ' (read only) '}"/>
			<local:PersonsPalette id="palette" visible="{!read_only}"/>
			<local:NotesPalette visible="{!read_only}"/>
			<!--<s:Label text="режим работы:" />-->
			<mx:Spacer width="100%"/>
			<mx:Image source="@Embed('/assets/settings.png')" toolTip="Sprint settings" click="settings_clickHandler(event)" height="17" width="17" useHandCursor="true" buttonMode="true" mouseDownEffect="glowImage" mouseUpEffect="unglowImage"/>
			<mx:Image source="@Embed('/assets/burndown.png')" toolTip="Burndown chart" click="burndown_clickHandler(event)" height="17" width="20" useHandCursor="true" buttonMode="true" mouseDownEffect="glowImage" mouseUpEffect="unglowImage"/>
			<mx:Image source="@Embed('/assets/history.png')" toolTip="Show history" click="showHistory_clickHandler(event)" height="17" width="14" useHandCursor="true" buttonMode="true" mouseDownEffect="glowImage" mouseUpEffect="unglowImage"/>
			<mx:Image source="@Embed('/assets/snapshot.png')" toolTip="Take snapshot" click="takeSnapshot_clickHandler(event)" height="17" width="21" useHandCursor="true" buttonMode="true" mouseDownEffect="glowImage" mouseUpEffect="unglowImage"/>
			<mx:Image source="@Embed('/assets/refresh.png')" toolTip="Refresh" click="refresh_clickHandler(event)" height="17" width="16" useHandCursor="true" buttonMode="true" mouseDownEffect="glowImage" mouseUpEffect="unglowImage"/>
		</mx:ApplicationControlBar>
		<s:Scroller id="scroller" width="100%" height="100%">
			<s:HGroup id="fullDesk" gap="0" requestedColumnCount="5" scaleX="{zoomFactor/100}" scaleY="{zoomFactor/100}">
				<s:VGroup gap="0" requestedRowCount="3" depth="22">
				    <local:DeskQuadrant id="q_lefttop"  quadId="1" topCategory="Не начатые" leftCategory="Очень важно" showTop="true" showLeft="true"/>
					<local:DeskQuadrant id="q_leftmid"  quadId="4" topCategory="Не начатые" leftCategory="Нормально" showLeft="true"/>
					<local:DeskQuadrant id="q_leftbot"  quadId="7" topCategory="Не начатые" leftCategory="Не важно" showLeft="true"/>
				</s:VGroup>
				<s:VGroup gap="0" requestedRowCount="3" depth="21">
					<local:DeskQuadrant id="q_midtop"   quadId="2" topCategory="Начатые" leftCategory="Очень важно" showTop="true"/>
					<local:DeskQuadrant id="q_midmid"   quadId="5" topCategory="Начатые" leftCategory="Нормально"/>
					<local:DeskQuadrant id="q_midbot"   quadId="8" topCategory="Начатые" leftCategory="Не важно"/>
				</s:VGroup>
				<s:VGroup gap="0" requestedRowCount="3" depth="20">
					<local:DeskQuadrant id="q_righttop" quadId="3" topCategory="Готовые к проверке" leftCategory="Очень важно" showTop="true"/>
					<local:DeskQuadrant id="q_rightmid" quadId="6" topCategory="Готовые к проверке" leftCategory="Нормально"/>
					<local:DeskQuadrant id="q_rightbot" quadId="9" topCategory="Готовые к проверке" leftCategory="Не важно"/>
				</s:VGroup>
				<s:VGroup gap="0" requestedRowCount="3" depth="19">
					<local:DeskQuadrant id="q_checkingtop" quadId="13" topCategory="Проверка" leftCategory="Очень важно" showTop="true"/>
					<local:DeskQuadrant id="q_checkingmid" quadId="14" topCategory="Проверка" leftCategory="Нормально"/>
					<local:DeskQuadrant id="q_checkingbot" quadId="15" topCategory="Проверка" leftCategory="Не важно"/>
				</s:VGroup>
				<s:VGroup gap="0" requestedRowCount="3" depth="18">
					<local:DeskQuadrant id="q_checktop" quadId="10" topCategory="Проверенные" leftCategory="Очень важно" showTop="true"/>
					<local:DeskQuadrant id="q_checkmid" quadId="11" topCategory="Проверенные" leftCategory="Нормально"/>
					<local:DeskQuadrant id="q_checkbot" quadId="12" topCategory="Проверенные" leftCategory="Не важно"/>
				</s:VGroup>
			</s:HGroup>
		</s:Scroller>
	</s:VGroup>
	
	<s:VGroup height="100%" width="100%">
		<mx:Spacer height="100%"/>
		<s:HGroup width="100%">
			<mx:Spacer width="100%" />
			<local:TrashBin visible="{!read_only}"/>
			<mx:Spacer width="20" />			
		</s:HGroup>
		<mx:Spacer height="30" />
	</s:VGroup>
	<s:VGroup height="100%" width="100%">
		<mx:Spacer height="100%"/>
		<s:HGroup width="100%">
			<mx:Spacer width="100%" />
			<s:BorderContainer depth="1" left="0" height="20" bottom="0"  right="0" borderVisible="false" backgroundAlpha="0.5">
				<s:Label id="sum" text="click me" verticalAlign="top" paddingTop="5" paddingLeft="5" paddingRight="5" mouseDown="sum_mouseDownHandler(event)"/>
			</s:BorderContainer>
			<mx:Spacer width="20" />			
		</s:HGroup>
		<mx:Spacer height="10" />		
	</s:VGroup>
</s:Application>
