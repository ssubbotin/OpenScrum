
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      StickyNote
 *  Source:     C:\plush2\OpenScrum\client_src\src\StickyNote.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2013.02.10 19:09:37 MSK
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.events.DragEvent;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.rpc.events.ResultEvent;
import mx.rpc.http.mxml.HTTPService;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.RichText;
import spark.components.VGroup;
import spark.layouts.VerticalLayout;



//  begin class def
public class StickyNote
    extends spark.components.Group
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _StickyNote_Label1 : spark.components.Label;

/**
 * @private
 **/
    public var _StickyNote_Label2 : spark.components.Label;

/**
 * @private
 **/
    public var _StickyNote_Object1 : Object;

/**
 * @private
 **/
    public var _StickyNote_Object2 : Object;

/**
 * @private
 **/
    public var _StickyNote_Object3 : Object;

/**
 * @private
 **/
    public var _StickyNote_Object4 : Object;

/**
 * @private
 **/
    public var _StickyNote_RichText1 : spark.components.RichText;

    [Bindable]
	/**
 * @private
 **/
    public var addtask : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var changetask : mx.rpc.http.mxml.HTTPService;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var color : uint;

    [Bindable]
	/**
 * @private
 **/
    public var deleteperson : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var draggable : spark.components.BorderContainer;

    [Bindable]
	/**
 * @private
 **/
    public var imgExpired : mx.controls.Image;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var inWorkDays : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var isDocked : Boolean;

    [Bindable]
	/**
 * @private
 **/
    public var movetask : mx.rpc.http.mxml.HTTPService;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var newX : uint;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var newY : uint;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var noteID : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var personColor : int;

    [Bindable]
	/**
 * @private
 **/
    public var personDock : spark.components.VGroup;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var personName : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var personNoteID : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var quadId : uint;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var serverURL : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var sprintID : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var text : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var usDays : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var usNumber : String;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function StickyNote()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _StickyNote_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_StickyNoteWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return StickyNote[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.width = 190;
        this.height = 140;
        this.layout = _StickyNote_VerticalLayout1_c();
        this.mxmlContent = [_StickyNote_HGroup1_c()];
        _StickyNote_HTTPService1_i();
        _StickyNote_HTTPService3_i();
        _StickyNote_uint1_i();
        _StickyNote_HTTPService4_i();
        _StickyNote_String4_i();
        _StickyNote_Boolean1_i();
        _StickyNote_HTTPService2_i();
        _StickyNote_uint3_i();
        _StickyNote_uint4_i();
        _StickyNote_String5_i();
        _StickyNote_int1_i();
        _StickyNote_String9_i();
        _StickyNote_String8_i();
        _StickyNote_uint2_i();
        _StickyNote_String6_i();
        _StickyNote_String7_i();
        _StickyNote_String1_i();
        _StickyNote_String3_i();
        _StickyNote_String2_i();


        // events










        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 12 - 187

			import flashx.textLayout.formats.Float;
			
			import flex.utils.ui.resize.MoveManager;
			
			import mx.containers.TitleWindow;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;

			private var mm:MoveManager;
			
			protected function dragEnterHandler(event:DragEvent):void
			{
				if(!isDocked && !FlexGlobals.topLevelApplication.read_only) {
					if (event.dragSource.hasFormat('personName')) {
						var draggedName:String = event.dragSource.dataForFormat('personName') as String;
						if((personDock.getChildByName(draggedName) == null) && 
							(personDock.numElements < 5)) {
							DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
						}
					}
				}
			}
			
			protected function dragDropHandler(event:DragEvent):void
			{
				var sp:StickyPerson = new StickyPerson();
				sp.person = event.dragSource.dataForFormat('personName') as String;
				sp.background = event.dragSource.dataForFormat('personBackground') as uint;
				sp.name = sp.person;
				
				var wasDocked:Boolean = event.dragSource.dataForFormat('personDocked') as Boolean;
				if(!wasDocked) {
					var person:StickyPerson = event.dragSource.dataForFormat('personItself') as StickyPerson;
					var parentGroup:Group = person.parent as Group;
					parentGroup.removeElement(person);
					
					personColor = person.background;
					personName = person.person;
					personNoteID = person.parentNoteID;
					deleteperson.send();
				}
				personDock.addElement(sp);
				sp.parentNoteID = noteID;
				sp.serverURL = serverURL;
				sp.sendAddEvent();
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				serverURL = FlexGlobals.topLevelApplication.parameters["serverURL"] as String;
				sprintID = FlexGlobals.topLevelApplication.parameters["sprintID"] as String;
				if(!isDocked && !FlexGlobals.topLevelApplication.read_only) {
					initmm(0);
				}
				updateExpired();
			}
			
			protected function updateExpired():void
			{
				var days:String = usDays;
				days = days.replace(/,/g,".");
				var daysfl:Number = parseFloat(days);
				
                imgExpired.visible = isNaN(daysfl) || (parseFloat(inWorkDays)>daysfl);
			}
			
			public function initmm(parentQuadId: int):void {
				if(mm != null) {
					mm.removeMoveSupport();
					quadId = parentQuadId;
					newX = x;
					newY = y;
					movetask.send();
				}
				mm = new MoveManager();
				mm.bringToFrontOnMove = true;
				var parentGroup:Group = parent as Group;
				var parentDesk:DeskQuadrant = parentGroup.parentDocument as DeskQuadrant;
				var rightBound:uint = parentDesk.showLeft?607:657;
				var bottomBound:uint = parentDesk.showTop?607:677;
				mm.constrainToBounds = new Rectangle(0,0,rightBound,bottomBound);
				mm.addMoveSupport(this, draggable, null);
			}

			protected function mouseDownHandler(event:MouseEvent):void
			{
				if(isDocked) {
					var ds:DragSource = new DragSource();
					ds.addData(color, 'noteColor');
					
					DragManager.doDrag(this, ds, event);
				}
			}

			protected function doubleClickHandler(event:MouseEvent):void
			{
				var properties:NotePropertiesDialog=NotePropertiesDialog(PopUpManager.createPopUp( this, NotePropertiesDialog , true));
				properties.okbutton.enabled = !FlexGlobals.topLevelApplication.read_only;
				//properties.x=event.stageX;
				//properties.y=event.stageY;
				properties.note = this;
				properties.loadNote();
			}

			public function sendCreationEvent():void {
				addtask.send();
			}
			
			public function sendParametersUpdate():void {
				changetask.send();
				updateExpired();
			}

			protected function addtask_resultHandler(event:ResultEvent):void
			{
			    noteID = addtask.lastResult.valueOf();
			}


			protected function draggable_mouseUpHandler(event:MouseEvent):void
			{
				if(!isDocked && !FlexGlobals.topLevelApplication.read_only) {
					newX = x;
					newY = y;
					movetask.send();	
				}				
			}

			protected function movetask_resultHandler(event:ResultEvent):void
			{
				var result:Object = movetask.lastResult;
			}
			
			private var playingReverse:Boolean = false;
			
//			public function doZoom(event:MouseEvent):void {
//				if(!isDocked && parentApplication.zoomFactor<100 && event.ctrlKey) {
//					var parentGroup:Group = event.target.parent as Group;
//					var index:int = parentGroup.getElementIndex(this);
//					var last:int = parentGroup.numElements - 1;
//					if (index != last) {
//						parentGroup.setElementIndex(this, last);
//					}
//					playingReverse = false;
//					zoomNote.play([this]);
//				}
//			}

//			public function doZoomRollOut(event:Event):void {
//				if(!isDocked && parentApplication.zoomFactor<100 && !playingReverse) {
//					if(scaleX > 1) {
//						playingReverse = true;
//						if (zoomNote.isPlaying) {
//							zoomNote.reverse();
//						} else 
//						{
//							zoomNote.play([this], true);
//						}
//					}
//				}
//			}

//			protected function group1_creationCompleteHandler(event:FlexEvent):void
//			{
//				addEventListener(Event.MOUSE_LEAVE, doZoomRollOut);
//			}

		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _StickyNote_HTTPService1_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _StickyNote_Object1_i();
	temp.addEventListener("result", __addtask_result);
	temp.initialized(this, "addtask")
	addtask = temp;
	mx.binding.BindingManager.executeBindings(this, "addtask", addtask);
	return temp;
}

private function _StickyNote_Object1_i() : Object
{
	var temp : Object = {sprint_id: null, quad: null, color: null, x: null, y: null, us_num: null, us_time: null, us_text: null};
	_StickyNote_Object1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Object1", _StickyNote_Object1);
	return temp;
}

/**
 * @private
 **/
public function __addtask_result(event:mx.rpc.events.ResultEvent):void
{
	addtask_resultHandler(event)
}

private function _StickyNote_HTTPService3_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _StickyNote_Object3_i();
	temp.initialized(this, "changetask")
	changetask = temp;
	mx.binding.BindingManager.executeBindings(this, "changetask", changetask);
	return temp;
}

private function _StickyNote_Object3_i() : Object
{
	var temp : Object = {id: null, us_num: null, us_time: null, us_text: null};
	_StickyNote_Object3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Object3", _StickyNote_Object3);
	return temp;
}

private function _StickyNote_uint1_i() : uint
{
	var temp : uint = 16774538;
	color = temp;
	mx.binding.BindingManager.executeBindings(this, "color", color);
	return temp;
}

private function _StickyNote_HTTPService4_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _StickyNote_Object4_i();
	temp.initialized(this, "deleteperson")
	deleteperson = temp;
	mx.binding.BindingManager.executeBindings(this, "deleteperson", deleteperson);
	return temp;
}

private function _StickyNote_Object4_i() : Object
{
	var temp : Object = {id: null, name: null, color: null};
	_StickyNote_Object4 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Object4", _StickyNote_Object4);
	return temp;
}

private function _StickyNote_String4_i() : String
{
	var temp : String = "0";
	inWorkDays = temp;
	mx.binding.BindingManager.executeBindings(this, "inWorkDays", inWorkDays);
	return temp;
}

private function _StickyNote_Boolean1_i() : Boolean
{
	var temp : Boolean = false;
	isDocked = temp;
	mx.binding.BindingManager.executeBindings(this, "isDocked", isDocked);
	return temp;
}

private function _StickyNote_HTTPService2_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _StickyNote_Object2_i();
	temp.addEventListener("result", __movetask_result);
	temp.initialized(this, "movetask")
	movetask = temp;
	mx.binding.BindingManager.executeBindings(this, "movetask", movetask);
	return temp;
}

private function _StickyNote_Object2_i() : Object
{
	var temp : Object = {id: null, quad: null, x: null, y: null};
	_StickyNote_Object2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Object2", _StickyNote_Object2);
	return temp;
}

/**
 * @private
 **/
public function __movetask_result(event:mx.rpc.events.ResultEvent):void
{
	movetask_resultHandler(event)
}

private function _StickyNote_uint3_i() : uint
{
	var temp : uint = 0;
	newX = temp;
	mx.binding.BindingManager.executeBindings(this, "newX", newX);
	return temp;
}

private function _StickyNote_uint4_i() : uint
{
	var temp : uint = 0;
	newY = temp;
	mx.binding.BindingManager.executeBindings(this, "newY", newY);
	return temp;
}

private function _StickyNote_String5_i() : String
{
	var temp : String = "NoID";
	noteID = temp;
	mx.binding.BindingManager.executeBindings(this, "noteID", noteID);
	return temp;
}

private function _StickyNote_int1_i() : int
{
	var temp : int = 0;
	personColor = temp;
	mx.binding.BindingManager.executeBindings(this, "personColor", personColor);
	return temp;
}

private function _StickyNote_String9_i() : String
{
	var temp : String = "Без имени";
	personName = temp;
	mx.binding.BindingManager.executeBindings(this, "personName", personName);
	return temp;
}

private function _StickyNote_String8_i() : String
{
	var temp : String = "0";
	personNoteID = temp;
	mx.binding.BindingManager.executeBindings(this, "personNoteID", personNoteID);
	return temp;
}

private function _StickyNote_uint2_i() : uint
{
	var temp : uint = 0;
	quadId = temp;
	mx.binding.BindingManager.executeBindings(this, "quadId", quadId);
	return temp;
}

private function _StickyNote_String6_i() : String
{
	var temp : String = "http://localhost";
	serverURL = temp;
	mx.binding.BindingManager.executeBindings(this, "serverURL", serverURL);
	return temp;
}

private function _StickyNote_String7_i() : String
{
	var temp : String = "NoID";
	sprintID = temp;
	mx.binding.BindingManager.executeBindings(this, "sprintID", sprintID);
	return temp;
}

private function _StickyNote_String1_i() : String
{
	var temp : String = "Заполните текст";
	text = temp;
	mx.binding.BindingManager.executeBindings(this, "text", text);
	return temp;
}

private function _StickyNote_String3_i() : String
{
	var temp : String = "0";
	usDays = temp;
	mx.binding.BindingManager.executeBindings(this, "usDays", usDays);
	return temp;
}

private function _StickyNote_String2_i() : String
{
	var temp : String = "#0";
	usNumber = temp;
	mx.binding.BindingManager.executeBindings(this, "usNumber", usNumber);
	return temp;
}

private function _StickyNote_VerticalLayout1_c() : spark.layouts.VerticalLayout
{
	var temp : spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
	return temp;
}

private function _StickyNote_HGroup1_c() : spark.components.HGroup
{
	var temp : spark.components.HGroup = new spark.components.HGroup();
	temp.depth = 2;
	temp.gap = -30;
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	temp.mxmlContent = [_StickyNote_BorderContainer1_i(), _StickyNote_VGroup2_i()];
	temp.addEventListener("creationComplete", ___StickyNote_HGroup1_creationComplete);
	temp.addEventListener("mouseDown", ___StickyNote_HGroup1_mouseDown);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _StickyNote_BorderContainer1_i() : spark.components.BorderContainer
{
	var temp : spark.components.BorderContainer = new spark.components.BorderContainer();
	temp.width = 140;
	temp.percentHeight = 100.0;
	temp.doubleClickEnabled = true;
	temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_StickyNote_Array3_c);
	temp.setStyle("contentBackgroundColor", 16777215);
	temp.addEventListener("doubleClick", __draggable_doubleClick);
	temp.addEventListener("mouseUp", __draggable_mouseUp);
	temp.id = "draggable";
	if (!temp.document) temp.document = this;
	draggable = temp;
	mx.binding.BindingManager.executeBindings(this, "draggable", draggable);
	return temp;
}

private function _StickyNote_Array3_c() : Array
{
	var temp : Array = [_StickyNote_Image1_i(), _StickyNote_VGroup1_c()];
	return temp;
}

private function _StickyNote_Image1_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	temp.source = _embed_mxml__assets_expired_jpg_1655512828;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.visible = false;
	temp.alpha = 0.3;
	temp.id = "imgExpired";
	if (!temp.document) temp.document = this;
	imgExpired = temp;
	mx.binding.BindingManager.executeBindings(this, "imgExpired", imgExpired);
	return temp;
}

private function _StickyNote_VGroup1_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 0;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.mxmlContent = [_StickyNote_Label1_i(), _StickyNote_RichText1_i(), _StickyNote_Label2_i()];
	temp.addEventListener("dragEnter", ___StickyNote_VGroup1_dragEnter);
	temp.addEventListener("dragDrop", ___StickyNote_VGroup1_dragDrop);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _StickyNote_Label1_i() : spark.components.Label
{
	var temp : spark.components.Label = new spark.components.Label();
	temp.percentWidth = 100.0;
	temp.setStyle("fontSize", 17);
	temp.setStyle("fontWeight", "bold");
	temp.setStyle("paddingLeft", 2);
	temp.setStyle("paddingTop", 2);
	temp.id = "_StickyNote_Label1";
	if (!temp.document) temp.document = this;
	_StickyNote_Label1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Label1", _StickyNote_Label1);
	return temp;
}

private function _StickyNote_RichText1_i() : spark.components.RichText
{
	var temp : spark.components.RichText = new spark.components.RichText();
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.setStyle("paddingLeft", 10);
	temp.setStyle("paddingRight", 10);
	temp.setStyle("paddingTop", 10);
	temp.setStyle("paddingBottom", 10);
	temp.id = "_StickyNote_RichText1";
	if (!temp.document) temp.document = this;
	_StickyNote_RichText1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_RichText1", _StickyNote_RichText1);
	return temp;
}

private function _StickyNote_Label2_i() : spark.components.Label
{
	var temp : spark.components.Label = new spark.components.Label();
	temp.percentWidth = 100.0;
	temp.setStyle("fontSize", 17);
	temp.setStyle("textAlign", "right");
	temp.setStyle("paddingRight", 2);
	temp.setStyle("paddingBottom", 2);
	temp.id = "_StickyNote_Label2";
	if (!temp.document) temp.document = this;
	_StickyNote_Label2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_StickyNote_Label2", _StickyNote_Label2);
	return temp;
}

/**
 * @private
 **/
public function ___StickyNote_VGroup1_dragEnter(event:mx.events.DragEvent):void
{
	dragEnterHandler(event)
}

/**
 * @private
 **/
public function ___StickyNote_VGroup1_dragDrop(event:mx.events.DragEvent):void
{
	dragDropHandler(event)
}

/**
 * @private
 **/
public function __draggable_doubleClick(event:flash.events.MouseEvent):void
{
	doubleClickHandler(event)
}

/**
 * @private
 **/
public function __draggable_mouseUp(event:flash.events.MouseEvent):void
{
	draggable_mouseUpHandler(event)
}

private function _StickyNote_VGroup2_i() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 3;
	temp.percentHeight = 100.0;
	temp.verticalAlign = "bottom";
	temp.paddingBottom = 30;
	temp.id = "personDock";
	if (!temp.document) temp.document = this;
	personDock = temp;
	mx.binding.BindingManager.executeBindings(this, "personDock", personDock);
	return temp;
}

/**
 * @private
 **/
public function ___StickyNote_HGroup1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}

/**
 * @private
 **/
public function ___StickyNote_HGroup1_mouseDown(event:flash.events.MouseEvent):void
{
	mouseDownHandler(event)
}


    //  binding mgmt
    private function _StickyNote_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/addtask.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "addtask.url"
            );

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.sprint_id"
            , "sprintID");

        result[2] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.quad"
            , "quadId");

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.color"
            , "color");

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.x"
            , "x");

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.y"
            , "y");

        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.us_num"
            , "usNumber");

        result[7] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.us_time"
            , "usDays");

        result[8] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object1.us_text"
            , "text");

        result[9] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/movetask.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "movetask.url"
            );

        result[10] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object2.id"
            , "noteID");

        result[11] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object2.quad"
            , "quadId");

        result[12] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object2.x"
            , "newX");

        result[13] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object2.y"
            , "newY");

        result[14] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/changetask.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "changetask.url"
            );

        result[15] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object3.id"
            , "noteID");

        result[16] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object3.us_num"
            , "usNumber");

        result[17] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object3.us_time"
            , "usDays");

        result[18] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object3.us_text"
            , "text");

        result[19] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/deleteperson.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "deleteperson.url"
            );

        result[20] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object4.id"
            , "personNoteID");

        result[21] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object4.name"
            , "personName");

        result[22] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Object4.color"
            , "personColor");

        result[23] = new mx.binding.Binding(this,
            null,
            function(_sourceFunctionReturnValue:uint):void
            {
                draggable.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "draggable.backgroundColor"
            , "color");

        result[24] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Label1.text"
            , "usNumber");

        result[25] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_RichText1.text"
            , "text");

        result[26] = new mx.binding.Binding(this,
            null,
            null,
            "_StickyNote_Label2.text"
            , "usDays");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (StickyNote)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
[Embed(source='/assets/expired.jpg')]
 private var _embed_mxml__assets_expired_jpg_1655512828:Class;

    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
