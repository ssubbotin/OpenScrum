
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      TrashBin
 *  Source:     C:\plush2\OpenScrum\client_src\src\TrashBin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2013.02.10 19:09:37 MSK
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.events.DragEvent;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.rpc.events.ResultEvent;
import mx.rpc.http.mxml.HTTPService;
import mx.styles.*;
import spark.components.Group;
import spark.layouts.HorizontalLayout;



//  begin class def
public class TrashBin
    extends spark.components.Group
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _TrashBin_Object1 : Object;

/**
 * @private
 **/
    public var _TrashBin_Object2 : Object;

    [Bindable]
	/**
 * @private
 **/
    public var deleteperson : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var deletetask : mx.rpc.http.mxml.HTTPService;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var noteID : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var personColor : int;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var personName : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var serverURL : String;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function TrashBin()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _TrashBin_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_TrashBinWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return TrashBin[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.width = 64;
        this.height = 64;
        this.layout = _TrashBin_HorizontalLayout1_c();
        this.mxmlContent = [_TrashBin_Image1_c()];
        _TrashBin_HTTPService2_i();
        _TrashBin_HTTPService1_i();
        _TrashBin_String1_i();
        _TrashBin_int1_i();
        _TrashBin_String2_i();
        _TrashBin_String3_i();


        // events
        this.addEventListener("creationComplete", ___TrashBin_Group1_creationComplete);










        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 10 - 83

			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			protected function dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat('personName')) {
					var wasDocked:Boolean = event.dragSource.dataForFormat('personDocked') as Boolean;
					if(!wasDocked) {
						DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
					}
				}
				if (event.dragSource.hasFormat('noteItself')) {
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}

			private var note:StickyNote; 
			
			protected function dragDropHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat('personName')) {
					var person:StickyPerson = event.dragSource.dataForFormat('personItself') as StickyPerson;					
					var parentGroup:Group = person.parent as Group;
					parentGroup.removeElement(person);
					
					personColor = person.background;
					personName = person.person;
					noteID = person.parentNoteID;
					deleteperson.send();
				}
				if (event.dragSource.hasFormat('noteItself')) {
					note = event.dragSource.dataForFormat('noteItself') as StickyNote;

					Alert.yesLabel = "Да";
					Alert.noLabel = "Нет";
					Alert.show("Вы уверены что хотите удалить эту задачу?", "Удаление задачи", 3, note.parentApplication as Sprite, alertPersonHandler);
				}
			}
			
			private function alertPersonHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					var parentGroup:Group = note.parent as Group;
					parentGroup.removeElement(note);
					noteID = note.noteID;
					deletetask.send();
				}
			}

			protected function deletetask_resultHandler(event:ResultEvent):void
			{
				var result:Object = deletetask.lastResult;
			}


			protected function creationCompleteHandler(event:FlexEvent):void
			{
				serverURL = FlexGlobals.topLevelApplication.parameters["serverURL"] as String;
			}


			protected function deleteperson_resultHandler(event:ResultEvent):void
			{
				var result:Object = deleteperson.lastResult;
			}

		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _TrashBin_HTTPService2_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _TrashBin_Object2_i();
	temp.addEventListener("result", __deleteperson_result);
	temp.initialized(this, "deleteperson")
	deleteperson = temp;
	mx.binding.BindingManager.executeBindings(this, "deleteperson", deleteperson);
	return temp;
}

private function _TrashBin_Object2_i() : Object
{
	var temp : Object = {id: null, name: null, color: null};
	_TrashBin_Object2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_TrashBin_Object2", _TrashBin_Object2);
	return temp;
}

/**
 * @private
 **/
public function __deleteperson_result(event:mx.rpc.events.ResultEvent):void
{
	deleteperson_resultHandler(event)
}

private function _TrashBin_HTTPService1_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "POST";
	temp.request = _TrashBin_Object1_i();
	temp.addEventListener("result", __deletetask_result);
	temp.initialized(this, "deletetask")
	deletetask = temp;
	mx.binding.BindingManager.executeBindings(this, "deletetask", deletetask);
	return temp;
}

private function _TrashBin_Object1_i() : Object
{
	var temp : Object = {id: null};
	_TrashBin_Object1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_TrashBin_Object1", _TrashBin_Object1);
	return temp;
}

/**
 * @private
 **/
public function __deletetask_result(event:mx.rpc.events.ResultEvent):void
{
	deletetask_resultHandler(event)
}

private function _TrashBin_String1_i() : String
{
	var temp : String = "0";
	noteID = temp;
	mx.binding.BindingManager.executeBindings(this, "noteID", noteID);
	return temp;
}

private function _TrashBin_int1_i() : int
{
	var temp : int = 0;
	personColor = temp;
	mx.binding.BindingManager.executeBindings(this, "personColor", personColor);
	return temp;
}

private function _TrashBin_String2_i() : String
{
	var temp : String = "Без имени";
	personName = temp;
	mx.binding.BindingManager.executeBindings(this, "personName", personName);
	return temp;
}

private function _TrashBin_String3_i() : String
{
	var temp : String = "http://localhost";
	serverURL = temp;
	mx.binding.BindingManager.executeBindings(this, "serverURL", serverURL);
	return temp;
}

private function _TrashBin_HorizontalLayout1_c() : spark.layouts.HorizontalLayout
{
	var temp : spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
	return temp;
}

private function _TrashBin_Image1_c() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	temp.source = _embed_mxml__assets_trash_icon_png_1716953004;
	temp.addEventListener("dragEnter", ___TrashBin_Image1_dragEnter);
	temp.addEventListener("dragDrop", ___TrashBin_Image1_dragDrop);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___TrashBin_Image1_dragEnter(event:mx.events.DragEvent):void
{
	dragEnterHandler(event)
}

/**
 * @private
 **/
public function ___TrashBin_Image1_dragDrop(event:mx.events.DragEvent):void
{
	dragDropHandler(event)
}

/**
 * @private
 **/
public function ___TrashBin_Group1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}


    //  binding mgmt
    private function _TrashBin_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/deletetask.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "deletetask.url"
            );

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "_TrashBin_Object1.id"
            , "noteID");

        result[2] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/deleteperson.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "deleteperson.url"
            );

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "_TrashBin_Object2.id"
            , "noteID");

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "_TrashBin_Object2.name"
            , "personName");

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "_TrashBin_Object2.color"
            , "personColor");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (TrashBin)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
[Embed(source='/assets/trash_icon.png')]
 private var _embed_mxml__assets_trash_icon_png_1716953004:Class;

    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
