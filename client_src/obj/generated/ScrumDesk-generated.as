
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      ScrumDesk
 *  Source:     C:\plush2\OpenScrum\client_src\src\ScrumDesk.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2013.02.10 19:09:37 MSK
 */

package 
{

import DeskQuadrant;
import NotesPalette;
import PersonsPalette;
import TrashBin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.ApplicationControlBar;
import mx.controls.Image;
import mx.controls.Label;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.effects.Glow;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.rpc.events.ResultEvent;
import mx.rpc.http.mxml.HTTPService;
import mx.styles.*;
import spark.components.Application;
import spark.components.BorderContainer;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.Scroller;
import spark.components.VGroup;
import spark.layouts.BasicLayout;


[SWF( heightPercent='100%', pageTitle='OpenScrum v0.2', widthPercent='100%')]
[Frame(extraClass="_ScrumDesk_FlexInit")]

[Frame(factoryClass="_ScrumDesk_mx_managers_SystemManager")]


//  begin class def
public class ScrumDesk
    extends spark.components.Application
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _ScrumDesk_Label1 : mx.controls.Label;

/**
 * @private
 **/
    public var _ScrumDesk_NotesPalette1 : NotesPalette;

/**
 * @private
 **/
    public var _ScrumDesk_Object1 : Object;

/**
 * @private
 **/
    public var _ScrumDesk_Object2 : Object;

/**
 * @private
 **/
    public var _ScrumDesk_Object3 : Object;

/**
 * @private
 **/
    public var _ScrumDesk_TrashBin1 : TrashBin;

    [Bindable]
	/**
 * @private
 **/
    public var fullDesk : spark.components.HGroup;

    [Bindable]
	/**
 * @private
 **/
    public var getincremental : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var gettasks : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var getversion : mx.rpc.http.mxml.HTTPService;

    [Bindable]
	/**
 * @private
 **/
    public var glowImage : mx.effects.Glow;

    [Bindable]
	/**
 * @private
 **/
    public var palette : PersonsPalette;

    [Bindable]
	/**
 * @private
 **/
    public var q_checkbot : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_checkmid : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_checktop : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_leftbot : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_leftmid : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_lefttop : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_midbot : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_midmid : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_midtop : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_rightbot : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_rightmid : DeskQuadrant;

    [Bindable]
	/**
 * @private
 **/
    public var q_righttop : DeskQuadrant;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var read_only : Boolean;

    [Bindable]
	/**
 * @private
 **/
    public var scroller : spark.components.Scroller;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var serverURL : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var sprintID : String;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var sprint_name : String;

    [Bindable]
	/**
 * @private
 **/
    public var sum : spark.components.Label;

    [Bindable]
	/**
 * @private
 **/
    public var unglowImage : mx.effects.Glow;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var version : int;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var zoomFactor : Number;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var zoomFactorStep : Number;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var zoomX : Number;

    [Inspectable]
    [Bindable]
	/**
 * @private
 **/
    public var zoomY : Number;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function ScrumDesk()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _ScrumDesk_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_ScrumDeskWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return ScrumDesk[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.minWidth = 400;
        this.minHeight = 200;
        this.layout = _ScrumDesk_BasicLayout1_c();
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ScrumDesk_Array1_c);
        _ScrumDesk_HTTPService3_i();
        _ScrumDesk_HTTPService1_i();
        _ScrumDesk_HTTPService2_i();
        _ScrumDesk_Glow1_i();
        _ScrumDesk_Boolean1_i();
        _ScrumDesk_String1_i();
        _ScrumDesk_String2_i();
        _ScrumDesk_String3_i();
        _ScrumDesk_Glow2_i();
        _ScrumDesk_int1_i();
        _ScrumDesk_Number1_i();
        _ScrumDesk_Number2_i();
        _ScrumDesk_Number3_i();
        _ScrumDesk_Number4_i();


        // events
        this.addEventListener("creationComplete", ___ScrumDesk_Application1_creationComplete);










        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings


        // ambient styles
        mx_internal::_ScrumDesk_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 16 - 475

			import flash.display.Stage;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ScrollEvent;
			import mx.graphics.ImageSnapshot;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			
			import spark.components.BorderContainer;
			import spark.effects.Scale;
			import spark.skins.spark.BorderContainerSkin;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(MouseEvent.MOUSE_WHEEL, disableMouseHandler, true);
				scroller.addEventListener(MouseEvent.MOUSE_DOWN, mouseCapture);
				scroller.addEventListener(MouseEvent.MOUSE_UP, mouseRelease);
				scroller.addEventListener(Event.MOUSE_LEAVE, mouseRelease);
				scroller.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, true);
				serverURL = FlexGlobals.topLevelApplication.parameters["serverURL"] as String;
				sprintID = FlexGlobals.topLevelApplication.parameters["sprintID"] as String;
				gettasks.send();
			}
			
			protected function calcComplexity():void {
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot];
				
				var complexity:Number = 0;
				var count:Number = 0;
				for(var oneQuad:Object in quads) {
					for(var i:int=0; i<quads[oneQuad].notesDock.numElements; i++) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							var note:StickyNote = quads[oneQuad].notesDock.getElementAt(i) as StickyNote;
							if(note.color != 0xb7fa57) {
								var days:String = note.usDays;
								days = days.replace(/,/g,".");
								complexity = complexity + parseFloat(days);
								count = count + 1;
							}
						}
					}
				}
				sum.text = "tasks: " + count.toFixed(0) + ", sum: " + complexity.toFixed(1);
			}
			
			private var captureMode:Boolean = false;
			private var captureX:Number = 0;
			private var captureY:Number = 0;
			private var timer:Timer = new Timer(60000, 0);
			
			private function checkForUpdate(e:Event):void {
				getversion.send();
			}
			
			private function mouseCapture(event:MouseEvent):void
			{
				if(event.target.parentDocument is DeskQuadrant) {
					captureMode = true;
					captureX = event.stageX;
					captureY = event.stageY;
				}
			}

			private function mouseRelease(event:Event):void
			{
			    captureMode = false;	
			}

			private function mouseMove(event:MouseEvent):void
			{
				if(!event.buttonDown) {
					mouseRelease(event);
				}
				if(captureMode) {
					event.stopImmediatePropagation();
					scroller.horizontalScrollBar.value = scroller.horizontalScrollBar.value + (captureX - event.stageX)/(zoomFactor/100);
					scroller.verticalScrollBar.value = scroller.verticalScrollBar.value + (captureY - event.stageY)/(zoomFactor/100);
					captureX = event.stageX;
					captureY = event.stageY;
				}
				/* if((!captureMode) && (event.target.parentDocument is StickyNote) && (zoomFactor<100)) {
					event.target.parentDocument.Scale()
				} */
			}
			
			private function loadPerson(person:Object, sn:StickyNote):void {
				var sp:StickyPerson = new StickyPerson();
				//sp.parentNoteID = person.task_id;
				sp.person = person.name;
				sp.background = person.color as int;
				sp.parentNoteID = sn.noteID;
				sp.name = person.name;
				sn.personDock.addElement(sp);
			}
			
			private function loadNote(note:Object):void {
				
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot];
				
				var quad:int = note.quad as int;
				var sn:StickyNote = new StickyNote();
				sn.noteID = note.id;
				sn.color = note.color as int;
				sn.x = note.x as int;
				sn.y = note.y as int;
				sn.usNumber = note.us_num; 
				sn.usDays = note.us_time;
				sn.inWorkDays = note.inwork;
				sn.text = note.us_text;
				sn.quadId = quad;
				quads[quad-1].notesDock.addElement(sn);

				if(note.assigned != null) {
					if(note.assigned is ArrayCollection) {
						for(var oneperson:Object in note.assigned) {					
							loadPerson(note.assigned[oneperson], sn);
						}
					} else {
						loadPerson(note.assigned, sn);
					}
				}
			}
			
			private function findBackground(name:String):uint {
				var sp:StickyPerson = null;
				for(var j:int=0; j<palette.numElements; j++) {
					if(palette.getElementAt(j) is StickyPerson) {
						sp = palette.getElementAt(j) as StickyPerson;
						if(sp.person == name) {
							return sp.background;
						}
					}
				}
				return 0;
			}
			
			private function loadIncremental(line:Object):void {
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot];				
				
				var taskKey:String = line.task_us_num;
				var action:String = line.action;
				var value:String = line.value;
				
				// find note and its hosting quad
				var sn:StickyNote = null;
				var qn:DeskQuadrant = null;
				var found:Boolean = false;
				for(var oneQuad:Object in quads) {
					for(var i:int=0; i<quads[oneQuad].notesDock.numElements; i++) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							sn = quads[oneQuad].notesDock.getElementAt(i);
							if(sn.noteID == taskKey) {
								qn = quads[oneQuad];
								found = true;
								break;
							}
						}
					}
					if(found) {
						break;
					}
				}
				
				switch(action) {
					case 'move_xy':
						var pos:Array = value.split(",");
						sn.x = pos[0];
						sn.y = pos[1];
						break;
					case 'move_quad': 
						var newQuad:int = int(value);
						qn.notesDock.removeElement(sn);
						quads[newQuad-1].notesDock.addElement(sn);
						break;
					case 'del_task':
						if(found) {
							qn.notesDock.removeElement(sn);
						}
						break;
					case 'del_assignee':
						var sp:StickyPerson = null;
						for(var j:int=0; j<sn.personDock.numElements; j++) {
							if(sn.personDock.getElementAt(j) is StickyPerson) {
								sp = sn.personDock.getElementAt(j) as StickyPerson;
								if(sp.name == value) {
									sn.personDock.removeElementAt(j);
									break;
								}
							}
						}
						break;
					case 'add_task':
						if(!found) {
							var newSn:StickyNote = new StickyNote();
							newSn.noteID = taskKey;
							newSn.quadId = 1;
							quads[0].notesDock.addElement(newSn);
						}
						break;
					case 'add_assignee': 
						var spFound:Boolean = false;
						var sp2:StickyPerson = null;
						for(var k:int=0; k<sn.personDock.numElements; k++) {
							if(sn.personDock.getElementAt(k) is StickyPerson) {
								sp2 = sn.personDock.getElementAt(k) as StickyPerson;
								if(sp2.name == value) {
									spFound = true;
									break;
								}
							}
						}
						if(!spFound) {
							var newPerson:StickyPerson = new StickyPerson();
							newPerson.parentNoteID = taskKey;
							newPerson.person = value;
							newPerson.name = value;
							newPerson.background = findBackground(value);
							sn.personDock.addElement(newPerson);
						}
						break;
					case 'change_us_num': 
						sn.usNumber = value;
						break;
					case 'change_us_text': 
						sn.text = value;
						break;
					case 'change_us_time': 
						sn.usDays = value;
						break;
					case 'change_us_priority': break;
					case 'change_color':
						sn.color = int(value);
						break;
				}
			}

			protected function gettasks_resultHandler(event:ResultEvent):void
			{
				if(gettasks.lastResult.scrumdesk != null) {
					if(gettasks.lastResult.scrumdesk.sprint_name != null) {
						sprint_name = gettasks.lastResult.scrumdesk.sprint_name; 
					}
					if(gettasks.lastResult.scrumdesk.read_only != null) {
						read_only = gettasks.lastResult.scrumdesk.read_only as Boolean; 
					}
					if(gettasks.lastResult.scrumdesk.version != null) {
						version = gettasks.lastResult.scrumdesk.version as int; 
					}
					if(gettasks.lastResult.scrumdesk.notes != null) {
						if(gettasks.lastResult.scrumdesk.notes is ArrayCollection) {
							for(var onenote:Object in gettasks.lastResult.scrumdesk.notes) {
								loadNote(gettasks.lastResult.scrumdesk.notes[onenote]);
							}
						} else {
							loadNote(gettasks.lastResult.scrumdesk.notes);
						}						
					}
				}
				
				if(!timer.running) {
					var interval:int = 60000; // default: 1 min
					var enabled:Boolean = true;
					
					var mySO:SharedObject = SharedObject.getLocal("openscrum");
					
					if(mySO.data.hasOwnProperty("incremental_load_timer_interval")) {
						interval = mySO.data.incremental_load_timer_interval;
					}
					if(mySO.data.hasOwnProperty("incremental_load_timer_enabled")) {
						enabled = mySO.data.incremental_load_timer_enabled;
					}
					
					timer.delay = interval;
					timer.addEventListener(TimerEvent.TIMER, checkForUpdate);
					if(enabled) {
						timer.start();
					} else {
						timer.removeEventListener(TimerEvent.TIMER, checkForUpdate);
					}
				}
			}
			
			protected function getincremental_resultHandler(event:ResultEvent):void
			{
				if(getincremental.lastResult.openscrum != null) {
					if(getincremental.lastResult.openscrum.history != null) {
						if(getincremental.lastResult.openscrum.history is ArrayCollection) {
							for(var oneLine:Object in getincremental.lastResult.openscrum.history) {
								loadIncremental(getincremental.lastResult.openscrum.history[oneLine]);
							}
						} else {
							loadIncremental(getincremental.lastResult.openscrum.history);
						}
					}
				}
			}
			
			protected function refresh_clickHandler(event:MouseEvent):void
			{				
				var quads:Array = [ q_lefttop,   q_midtop, q_righttop, 
					q_leftmid,   q_midmid, q_rightmid,
					q_leftbot,   q_midbot, q_rightbot,
					q_checktop, q_checkmid, q_checkbot];
				
				for(var oneQuad:Object in quads) {
					for(var i:int=0; i<quads[oneQuad].notesDock.numElements; ) {
						if(quads[oneQuad].notesDock.getElementAt(i) is StickyNote) {
							quads[oneQuad].notesDock.removeElementAt(i);
						} else {
							i = i + 1;
						}
					}
				}
				gettasks.send();
			}
			
			protected function disableMouseHandler(event:MouseEvent):void {
				event.stopPropagation();
				if(event.ctrlKey) {
					if(event.delta>0) {
						if(zoomFactor<300) {
							zoomFactor = zoomFactor * zoomFactorStep;
						}
					} else {
						if(zoomFactor>10) {
							zoomFactor = zoomFactor / zoomFactorStep;
						}
					}
				} else {
					scroller.verticalScrollBar.value = scroller.verticalScrollBar.value - event.delta*20; 
				}
			}
			
			public function takeSnapshot() :void
			{
				var bd:BitmapData = new BitmapData(fullDesk.measuredWidth,fullDesk.measuredHeight);
				
				// draw top row
				bd.draw(q_lefttop);
				
				var matrix_t1:Matrix = new Matrix();
				matrix_t1.translate(q_lefttop.width,0);
				bd.draw(q_midtop, matrix_t1, null, "normal");
				
				var matrix_t2:Matrix = new Matrix();
				matrix_t2.translate(q_lefttop.width + q_midtop.width,0);
				bd.draw(q_righttop, matrix_t2, null, "normal");
				
				var matrix_t3:Matrix = new Matrix();
				matrix_t3.translate(q_lefttop.width + q_midtop.width + q_righttop.width,0);
				bd.draw(q_checktop, matrix_t3, null, "normal");
				
				// draw middle row
				var matrix_m1:Matrix = new Matrix();
				matrix_m1.translate(0,q_lefttop.height);
				bd.draw(q_leftmid, matrix_m1, null, "normal");
				
				var matrix_m2:Matrix = new Matrix();
				matrix_m2.translate(q_lefttop.width,q_lefttop.height);
				bd.draw(q_midmid, matrix_m2, null, "normal");
				
				var matrix_m3:Matrix = new Matrix();
				matrix_m3.translate(q_lefttop.width + q_midtop.width,q_lefttop.height);
				bd.draw(q_rightmid, matrix_m3, null, "normal");

				var matrix_m4:Matrix = new Matrix();
				matrix_m4.translate(q_lefttop.width + q_midtop.width + q_righttop.width,q_lefttop.height);
				bd.draw(q_checkmid, matrix_m4, null, "normal");

                // draw bottom row
				var matrix_b1:Matrix = new Matrix();
				matrix_b1.translate(0,q_lefttop.height+q_leftmid.height);
				bd.draw(q_leftbot, matrix_b1, null, "normal");
				
				var matrix_b2:Matrix = new Matrix();
				matrix_b2.translate(q_lefttop.width,q_lefttop.height+q_leftmid.height);
				bd.draw(q_midbot, matrix_b2, null, "normal");
				
				var matrix_b3:Matrix = new Matrix();
				matrix_b3.translate(q_lefttop.width + q_midtop.width,q_lefttop.height+q_leftmid.height);
				bd.draw(q_rightbot, matrix_b3, null, "normal");
				
				var matrix_b4:Matrix = new Matrix();
				matrix_b4.translate(q_lefttop.width + q_midtop.width + q_righttop.width,q_lefttop.height+q_leftmid.height);
				bd.draw(q_checkbot, matrix_b4, null, "normal");

				// save PNG
				var ba:ByteArray = (new PNGEncoder()).encode(bd);	
				
				var today:Date = new Date();
				var datetime:String = today.getDate().toString()+"_"+
					                 (today.getMonth()+1).toString()+"_"+
									 today.getFullYear().toString()+"_"+
									 today.getHours().toString()+"_"+
									 today.getMinutes().toString();

				(new FileReference()).save(ba, "scrumdesk_snapshot_" + datetime + ".png");
			}
			
			protected function takeSnapshot_clickHandler(event:MouseEvent):void
			{
				takeSnapshot();
			}
			
			protected function showHistory_clickHandler(event:MouseEvent):void
			{
				var wnd:SprintHistoryView = SprintHistoryView(PopUpManager.createPopUp( this, SprintHistoryView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}

			protected function burndown_clickHandler(event:MouseEvent):void
			{
				var wnd:BurnDownView = BurnDownView(PopUpManager.createPopUp( this, BurnDownView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}

			protected function settings_clickHandler(event:MouseEvent):void
			{
				var wnd:SettingsView = SettingsView(PopUpManager.createPopUp( this, SettingsView, true));
				wnd.width = this.width;
				wnd.height = this.height;
			}
			
			protected function getversion_resultHandler(event:ResultEvent):void
			{
				var received_ver:int = getversion.lastResult.valueOf() as int;
				if(received_ver>version) {
					getincremental.send();
					version = received_ver;
				}				
			}
						
			protected function sum_mouseDownHandler(event:MouseEvent):void
			{
				calcComplexity();				
			}
			
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _ScrumDesk_HTTPService3_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "GET";
	temp.request = _ScrumDesk_Object3_i();
	temp.addEventListener("result", __getincremental_result);
	temp.initialized(this, "getincremental")
	getincremental = temp;
	mx.binding.BindingManager.executeBindings(this, "getincremental", getincremental);
	return temp;
}

private function _ScrumDesk_Object3_i() : Object
{
	var temp : Object = {sprint_id: null, ver: null};
	_ScrumDesk_Object3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ScrumDesk_Object3", _ScrumDesk_Object3);
	return temp;
}

/**
 * @private
 **/
public function __getincremental_result(event:mx.rpc.events.ResultEvent):void
{
	getincremental_resultHandler(event)
}

private function _ScrumDesk_HTTPService1_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "GET";
	temp.request = _ScrumDesk_Object1_i();
	temp.addEventListener("result", __gettasks_result);
	temp.initialized(this, "gettasks")
	gettasks = temp;
	mx.binding.BindingManager.executeBindings(this, "gettasks", gettasks);
	return temp;
}

private function _ScrumDesk_Object1_i() : Object
{
	var temp : Object = {sprint_id: null};
	_ScrumDesk_Object1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ScrumDesk_Object1", _ScrumDesk_Object1);
	return temp;
}

/**
 * @private
 **/
public function __gettasks_result(event:mx.rpc.events.ResultEvent):void
{
	gettasks_resultHandler(event)
}

private function _ScrumDesk_HTTPService2_i() : mx.rpc.http.mxml.HTTPService
{
	var temp : mx.rpc.http.mxml.HTTPService = new mx.rpc.http.mxml.HTTPService();
	temp.method = "GET";
	temp.request = _ScrumDesk_Object2_i();
	temp.addEventListener("result", __getversion_result);
	temp.initialized(this, "getversion")
	getversion = temp;
	mx.binding.BindingManager.executeBindings(this, "getversion", getversion);
	return temp;
}

private function _ScrumDesk_Object2_i() : Object
{
	var temp : Object = {sprint_id: null};
	_ScrumDesk_Object2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ScrumDesk_Object2", _ScrumDesk_Object2);
	return temp;
}

/**
 * @private
 **/
public function __getversion_result(event:mx.rpc.events.ResultEvent):void
{
	getversion_resultHandler(event)
}

private function _ScrumDesk_Glow1_i() : mx.effects.Glow
{
	var temp : mx.effects.Glow = new mx.effects.Glow();
	temp.duration = 250;
	temp.alphaFrom = 1;
	temp.alphaTo = 0.3;
	temp.blurXFrom = 0.0;
	temp.blurXTo = 50;
	temp.blurYFrom = 0.0;
	temp.blurYTo = 50;
	temp.color = 16774538;
	glowImage = temp;
	mx.binding.BindingManager.executeBindings(this, "glowImage", glowImage);
	return temp;
}

private function _ScrumDesk_Boolean1_i() : Boolean
{
	var temp : Boolean = false;
	read_only = temp;
	mx.binding.BindingManager.executeBindings(this, "read_only", read_only);
	return temp;
}

private function _ScrumDesk_String1_i() : String
{
	var temp : String = "http://localhost";
	serverURL = temp;
	mx.binding.BindingManager.executeBindings(this, "serverURL", serverURL);
	return temp;
}

private function _ScrumDesk_String2_i() : String
{
	var temp : String = "NoID";
	sprintID = temp;
	mx.binding.BindingManager.executeBindings(this, "sprintID", sprintID);
	return temp;
}

private function _ScrumDesk_String3_i() : String
{
	var temp : String = "NoName";
	sprint_name = temp;
	mx.binding.BindingManager.executeBindings(this, "sprint_name", sprint_name);
	return temp;
}

private function _ScrumDesk_Glow2_i() : mx.effects.Glow
{
	var temp : mx.effects.Glow = new mx.effects.Glow();
	temp.duration = 250;
	temp.alphaFrom = 0.3;
	temp.alphaTo = 1.0;
	temp.blurXFrom = 50.0;
	temp.blurXTo = 0.0;
	temp.blurYFrom = 50.0;
	temp.blurYTo = 0.0;
	temp.color = 16774538;
	unglowImage = temp;
	mx.binding.BindingManager.executeBindings(this, "unglowImage", unglowImage);
	return temp;
}

private function _ScrumDesk_int1_i() : int
{
	var temp : int = 0;
	version = temp;
	mx.binding.BindingManager.executeBindings(this, "version", version);
	return temp;
}

private function _ScrumDesk_Number1_i() : Number
{
	var temp : Number = 100;
	zoomFactor = temp;
	mx.binding.BindingManager.executeBindings(this, "zoomFactor", zoomFactor);
	return temp;
}

private function _ScrumDesk_Number2_i() : Number
{
	var temp : Number = 1.1;
	zoomFactorStep = temp;
	mx.binding.BindingManager.executeBindings(this, "zoomFactorStep", zoomFactorStep);
	return temp;
}

private function _ScrumDesk_Number3_i() : Number
{
	var temp : Number = 0;
	zoomX = temp;
	mx.binding.BindingManager.executeBindings(this, "zoomX", zoomX);
	return temp;
}

private function _ScrumDesk_Number4_i() : Number
{
	var temp : Number = 0;
	zoomY = temp;
	mx.binding.BindingManager.executeBindings(this, "zoomY", zoomY);
	return temp;
}

private function _ScrumDesk_BasicLayout1_c() : spark.layouts.BasicLayout
{
	var temp : spark.layouts.BasicLayout = new spark.layouts.BasicLayout();
	return temp;
}

private function _ScrumDesk_Array1_c() : Array
{
	var temp : Array = [_ScrumDesk_VGroup1_c(), _ScrumDesk_VGroup6_c(), _ScrumDesk_VGroup7_c()];
	return temp;
}

private function _ScrumDesk_VGroup1_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.mxmlContent = [_ScrumDesk_ApplicationControlBar1_c(), _ScrumDesk_Scroller1_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_ApplicationControlBar1_c() : mx.containers.ApplicationControlBar
{
	var temp : mx.containers.ApplicationControlBar = new mx.containers.ApplicationControlBar();
	temp.focusEnabled = true;
	temp.depth = 1;
	temp.dock = true;
	temp.percentWidth = 100.0;
	temp.setStyle("paddingTop", 0);
	temp.setStyle("paddingBottom", 0);
	temp.setStyle("verticalAlign", "middle");
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.ApplicationControlBar
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        id: "_ScrumDesk_Label1"
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: PersonsPalette
		        ,
		        id: "palette"
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: NotesPalette
		        ,
		        id: "_ScrumDesk_NotesPalette1"
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Spacer
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Image
		        ,
		        events: {
		          click: "___ScrumDesk_Image1_click"
		        }
		        ,
		        effects: [ "mouseDownEffect", "mouseUpEffect" ]
		        ,
		        stylesFactory: function():void {
		          this.mouseDownEffect = "glowImage";
		          this.mouseUpEffect = "unglowImage";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          source: _embed_mxml__assets_settings_png_895538898,
		          toolTip: "Sprint settings",
		          height: 17,
		          width: 17,
		          useHandCursor: true,
		          buttonMode: true
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Image
		        ,
		        events: {
		          click: "___ScrumDesk_Image2_click"
		        }
		        ,
		        effects: [ "mouseDownEffect", "mouseUpEffect" ]
		        ,
		        stylesFactory: function():void {
		          this.mouseDownEffect = "glowImage";
		          this.mouseUpEffect = "unglowImage";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          source: _embed_mxml__assets_burndown_png_1851744686,
		          toolTip: "Burndown chart",
		          height: 17,
		          width: 20,
		          useHandCursor: true,
		          buttonMode: true
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Image
		        ,
		        events: {
		          click: "___ScrumDesk_Image3_click"
		        }
		        ,
		        effects: [ "mouseDownEffect", "mouseUpEffect" ]
		        ,
		        stylesFactory: function():void {
		          this.mouseDownEffect = "glowImage";
		          this.mouseUpEffect = "unglowImage";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          source: _embed_mxml__assets_history_png_2019488050,
		          toolTip: "Show history",
		          height: 17,
		          width: 14,
		          useHandCursor: true,
		          buttonMode: true
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Image
		        ,
		        events: {
		          click: "___ScrumDesk_Image4_click"
		        }
		        ,
		        effects: [ "mouseDownEffect", "mouseUpEffect" ]
		        ,
		        stylesFactory: function():void {
		          this.mouseDownEffect = "glowImage";
		          this.mouseUpEffect = "unglowImage";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          source: _embed_mxml__assets_snapshot_png_475884812,
		          toolTip: "Take snapshot",
		          height: 17,
		          width: 21,
		          useHandCursor: true,
		          buttonMode: true
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Image
		        ,
		        events: {
		          click: "___ScrumDesk_Image5_click"
		        }
		        ,
		        effects: [ "mouseDownEffect", "mouseUpEffect" ]
		        ,
		        stylesFactory: function():void {
		          this.mouseDownEffect = "glowImage";
		          this.mouseUpEffect = "unglowImage";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          source: _embed_mxml__assets_refresh_png_1003934464,
		          toolTip: "Refresh",
		          height: 17,
		          width: 16,
		          useHandCursor: true,
		          buttonMode: true
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___ScrumDesk_Image1_click(event:flash.events.MouseEvent):void
{
	settings_clickHandler(event)
}

/**
 * @private
 **/
public function ___ScrumDesk_Image2_click(event:flash.events.MouseEvent):void
{
	burndown_clickHandler(event)
}

/**
 * @private
 **/
public function ___ScrumDesk_Image3_click(event:flash.events.MouseEvent):void
{
	showHistory_clickHandler(event)
}

/**
 * @private
 **/
public function ___ScrumDesk_Image4_click(event:flash.events.MouseEvent):void
{
	takeSnapshot_clickHandler(event)
}

/**
 * @private
 **/
public function ___ScrumDesk_Image5_click(event:flash.events.MouseEvent):void
{
	refresh_clickHandler(event)
}

private function _ScrumDesk_Scroller1_i() : spark.components.Scroller
{
	var temp : spark.components.Scroller = new spark.components.Scroller();
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.viewport = _ScrumDesk_HGroup1_i();
	temp.id = "scroller";
	if (!temp.document) temp.document = this;
	scroller = temp;
	mx.binding.BindingManager.executeBindings(this, "scroller", scroller);
	return temp;
}

private function _ScrumDesk_HGroup1_i() : spark.components.HGroup
{
	var temp : spark.components.HGroup = new spark.components.HGroup();
	temp.gap = 0;
	temp.requestedColumnCount = 4;
	temp.mxmlContent = [_ScrumDesk_VGroup2_c(), _ScrumDesk_VGroup3_c(), _ScrumDesk_VGroup4_c(), _ScrumDesk_VGroup5_c()];
	temp.id = "fullDesk";
	if (!temp.document) temp.document = this;
	fullDesk = temp;
	mx.binding.BindingManager.executeBindings(this, "fullDesk", fullDesk);
	return temp;
}

private function _ScrumDesk_VGroup2_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 0;
	temp.requestedRowCount = 3;
	temp.depth = 22;
	temp.mxmlContent = [_ScrumDesk_DeskQuadrant1_i(), _ScrumDesk_DeskQuadrant2_i(), _ScrumDesk_DeskQuadrant3_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_DeskQuadrant1_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 1;
	temp.topCategory = "Не начатые";
	temp.leftCategory = "Очень важно";
	temp.showTop = true;
	temp.showLeft = true;
	temp.id = "q_lefttop";
	if (!temp.document) temp.document = this;
	q_lefttop = temp;
	mx.binding.BindingManager.executeBindings(this, "q_lefttop", q_lefttop);
	return temp;
}

private function _ScrumDesk_DeskQuadrant2_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 4;
	temp.topCategory = "Не начатые";
	temp.leftCategory = "Нормально";
	temp.showLeft = true;
	temp.id = "q_leftmid";
	if (!temp.document) temp.document = this;
	q_leftmid = temp;
	mx.binding.BindingManager.executeBindings(this, "q_leftmid", q_leftmid);
	return temp;
}

private function _ScrumDesk_DeskQuadrant3_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 7;
	temp.topCategory = "Не начатые";
	temp.leftCategory = "Не важно";
	temp.showLeft = true;
	temp.id = "q_leftbot";
	if (!temp.document) temp.document = this;
	q_leftbot = temp;
	mx.binding.BindingManager.executeBindings(this, "q_leftbot", q_leftbot);
	return temp;
}

private function _ScrumDesk_VGroup3_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 0;
	temp.requestedRowCount = 3;
	temp.depth = 21;
	temp.mxmlContent = [_ScrumDesk_DeskQuadrant4_i(), _ScrumDesk_DeskQuadrant5_i(), _ScrumDesk_DeskQuadrant6_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_DeskQuadrant4_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 2;
	temp.topCategory = "Начатые";
	temp.leftCategory = "Очень важно";
	temp.showTop = true;
	temp.id = "q_midtop";
	if (!temp.document) temp.document = this;
	q_midtop = temp;
	mx.binding.BindingManager.executeBindings(this, "q_midtop", q_midtop);
	return temp;
}

private function _ScrumDesk_DeskQuadrant5_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 5;
	temp.topCategory = "Начатые";
	temp.leftCategory = "Нормально";
	temp.id = "q_midmid";
	if (!temp.document) temp.document = this;
	q_midmid = temp;
	mx.binding.BindingManager.executeBindings(this, "q_midmid", q_midmid);
	return temp;
}

private function _ScrumDesk_DeskQuadrant6_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 8;
	temp.topCategory = "Начатые";
	temp.leftCategory = "Не важно";
	temp.id = "q_midbot";
	if (!temp.document) temp.document = this;
	q_midbot = temp;
	mx.binding.BindingManager.executeBindings(this, "q_midbot", q_midbot);
	return temp;
}

private function _ScrumDesk_VGroup4_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 0;
	temp.requestedRowCount = 3;
	temp.depth = 20;
	temp.mxmlContent = [_ScrumDesk_DeskQuadrant7_i(), _ScrumDesk_DeskQuadrant8_i(), _ScrumDesk_DeskQuadrant9_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_DeskQuadrant7_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 3;
	temp.topCategory = "Готовые к проверке";
	temp.leftCategory = "Очень важно";
	temp.showTop = true;
	temp.id = "q_righttop";
	if (!temp.document) temp.document = this;
	q_righttop = temp;
	mx.binding.BindingManager.executeBindings(this, "q_righttop", q_righttop);
	return temp;
}

private function _ScrumDesk_DeskQuadrant8_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 6;
	temp.topCategory = "Готовые к проверке";
	temp.leftCategory = "Нормально";
	temp.id = "q_rightmid";
	if (!temp.document) temp.document = this;
	q_rightmid = temp;
	mx.binding.BindingManager.executeBindings(this, "q_rightmid", q_rightmid);
	return temp;
}

private function _ScrumDesk_DeskQuadrant9_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 9;
	temp.topCategory = "Готовые к проверке";
	temp.leftCategory = "Не важно";
	temp.id = "q_rightbot";
	if (!temp.document) temp.document = this;
	q_rightbot = temp;
	mx.binding.BindingManager.executeBindings(this, "q_rightbot", q_rightbot);
	return temp;
}

private function _ScrumDesk_VGroup5_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.gap = 0;
	temp.requestedRowCount = 3;
	temp.depth = 19;
	temp.mxmlContent = [_ScrumDesk_DeskQuadrant10_i(), _ScrumDesk_DeskQuadrant11_i(), _ScrumDesk_DeskQuadrant12_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_DeskQuadrant10_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 10;
	temp.topCategory = "Проверенные";
	temp.leftCategory = "Очень важно";
	temp.showTop = true;
	temp.id = "q_checktop";
	if (!temp.document) temp.document = this;
	q_checktop = temp;
	mx.binding.BindingManager.executeBindings(this, "q_checktop", q_checktop);
	return temp;
}

private function _ScrumDesk_DeskQuadrant11_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 11;
	temp.topCategory = "Проверенные";
	temp.leftCategory = "Нормально";
	temp.id = "q_checkmid";
	if (!temp.document) temp.document = this;
	q_checkmid = temp;
	mx.binding.BindingManager.executeBindings(this, "q_checkmid", q_checkmid);
	return temp;
}

private function _ScrumDesk_DeskQuadrant12_i() : DeskQuadrant
{
	var temp : DeskQuadrant = new DeskQuadrant();
	temp.quadId = 12;
	temp.topCategory = "Проверенные";
	temp.leftCategory = "Не важно";
	temp.id = "q_checkbot";
	if (!temp.document) temp.document = this;
	q_checkbot = temp;
	mx.binding.BindingManager.executeBindings(this, "q_checkbot", q_checkbot);
	return temp;
}

private function _ScrumDesk_VGroup6_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	temp.mxmlContent = [_ScrumDesk_Spacer2_c(), _ScrumDesk_HGroup2_c(), _ScrumDesk_Spacer5_c()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer2_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.percentHeight = 100.0;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_HGroup2_c() : spark.components.HGroup
{
	var temp : spark.components.HGroup = new spark.components.HGroup();
	temp.percentWidth = 100.0;
	temp.mxmlContent = [_ScrumDesk_Spacer3_c(), _ScrumDesk_TrashBin1_i(), _ScrumDesk_Spacer4_c()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer3_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_TrashBin1_i() : TrashBin
{
	var temp : TrashBin = new TrashBin();
	temp.id = "_ScrumDesk_TrashBin1";
	if (!temp.document) temp.document = this;
	_ScrumDesk_TrashBin1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ScrumDesk_TrashBin1", _ScrumDesk_TrashBin1);
	return temp;
}

private function _ScrumDesk_Spacer4_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.width = 20;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer5_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.height = 30;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_VGroup7_c() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	temp.mxmlContent = [_ScrumDesk_Spacer6_c(), _ScrumDesk_HGroup3_c(), _ScrumDesk_Spacer9_c()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer6_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.percentHeight = 100.0;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_HGroup3_c() : spark.components.HGroup
{
	var temp : spark.components.HGroup = new spark.components.HGroup();
	temp.percentWidth = 100.0;
	temp.mxmlContent = [_ScrumDesk_Spacer7_c(), _ScrumDesk_BorderContainer1_c(), _ScrumDesk_Spacer8_c()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer7_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_BorderContainer1_c() : spark.components.BorderContainer
{
	var temp : spark.components.BorderContainer = new spark.components.BorderContainer();
	temp.depth = 1;
	temp.left = 0;
	temp.height = 20;
	temp.bottom = 0;
	temp.right = 0;
	temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ScrumDesk_Array12_c);
	temp.setStyle("borderVisible", false);
	temp.setStyle("backgroundAlpha", 0.5);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Array12_c() : Array
{
	var temp : Array = [_ScrumDesk_Label2_i()];
	return temp;
}

private function _ScrumDesk_Label2_i() : spark.components.Label
{
	var temp : spark.components.Label = new spark.components.Label();
	temp.text = "click me";
	temp.setStyle("verticalAlign", "top");
	temp.setStyle("paddingTop", 5);
	temp.setStyle("paddingLeft", 5);
	temp.setStyle("paddingRight", 5);
	temp.addEventListener("mouseDown", __sum_mouseDown);
	temp.id = "sum";
	if (!temp.document) temp.document = this;
	sum = temp;
	mx.binding.BindingManager.executeBindings(this, "sum", sum);
	return temp;
}

/**
 * @private
 **/
public function __sum_mouseDown(event:flash.events.MouseEvent):void
{
	sum_mouseDownHandler(event)
}

private function _ScrumDesk_Spacer8_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.width = 20;
	if (!temp.document) temp.document = this;
	return temp;
}

private function _ScrumDesk_Spacer9_c() : mx.controls.Spacer
{
	var temp : mx.controls.Spacer = new mx.controls.Spacer();
	temp.height = 10;
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___ScrumDesk_Application1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}


    //  binding mgmt
    private function _ScrumDesk_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/gettasks.php');
                return (result == undefined ? null : String(result));
            },
            null,
            "gettasks.url"
            );

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "_ScrumDesk_Object1.sprint_id"
            , "sprintID");

        result[2] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/getversion');
                return (result == undefined ? null : String(result));
            },
            null,
            "getversion.url"
            );

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "_ScrumDesk_Object2.sprint_id"
            , "sprintID");

        result[4] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (serverURL + '/gettasksinc');
                return (result == undefined ? null : String(result));
            },
            null,
            "getincremental.url"
            );

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "_ScrumDesk_Object3.sprint_id"
            , "sprintID");

        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "_ScrumDesk_Object3.ver"
            , "version");

        result[7] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = "Sprint: " + (!read_only ? sprint_name: sprint_name + ' (read only) ');
                return (result == undefined ? null : String(result));
            },
            null,
            "_ScrumDesk_Label1.text"
            );

        result[8] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (!read_only);
            },
            null,
            "palette.visible"
            );

        result[9] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (!read_only);
            },
            null,
            "_ScrumDesk_NotesPalette1.visible"
            );

        result[10] = new mx.binding.Binding(this,
            function():Number
            {

                return (zoomFactor/100);
            },
            null,
            "fullDesk.scaleX"
            );

        result[11] = new mx.binding.Binding(this,
            function():Number
            {

                return (zoomFactor/100);
            },
            null,
            "fullDesk.scaleY"
            );

        result[12] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (!read_only);
            },
            null,
            "_ScrumDesk_TrashBin1.visible"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (ScrumDesk)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;

    //  initialize style defs for ScrumDesk

    mx_internal var _ScrumDesk_StylesInit_done:Boolean = false;

    mx_internal function _ScrumDesk_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_ScrumDesk_StylesInit_done)
            return;
        else
            mx_internal::_ScrumDesk_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;
        selector = null;
        conditions = null;
        conditions = null;
        selector = new CSSSelector("global", conditions, selector);
        // global
        style = styleManager.getStyleDeclaration("global");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
            };
        }





        styleManager.initProtoChainRoots();
    }


    //  embed carrier vars
[Embed(source='/assets/snapshot.png')]
 private var _embed_mxml__assets_snapshot_png_475884812:Class;

[Embed(source='/assets/burndown.png')]
 private var _embed_mxml__assets_burndown_png_1851744686:Class;

[Embed(source='/assets/settings.png')]
 private var _embed_mxml__assets_settings_png_895538898:Class;

[Embed(source='/assets/refresh.png')]
 private var _embed_mxml__assets_refresh_png_1003934464:Class;

[Embed(source='/assets/history.png')]
 private var _embed_mxml__assets_history_png_2019488050:Class;

    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
